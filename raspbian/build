#!/bin/bash -e

echo "Running preinst scripts..."

for script in $ROOTDIR/var/lib/dpkg/info/*.preinst; do
        [ "$script" = "$ROOTDIR/var/lib/dpkg/info/vpnc.preinst" ] && continue
        echo "I: run preinst script ${script##$ROOTDIR}"
        DPKG_MAINTSCRIPT_NAME=preinst \
        DPKG_MAINTSCRIPT_PACKAGE="`basename $script .preinst`" \
        $MYCHROOT $ROOTDIR ${script##$ROOTDIR} install
done

echo "Running dpkg --configure -a"

# don't run makedev
# we will create device nodes later, after we are done with the system dev
rm -f $ROOTDIR/var/lib/dpkg/info/makedev.postinst

# work around https://pad.lv/1727874
rm -f $ROOTDIR/var/lib/dpkg/info/raspbian-archive-keyring.postinst
ln -sf /usr/share/keyrings/raspbian-archive-keyring.gpg $ROOTDIR/etc/apt/trusted.gpg.d/

# work around PAM error
ln -s -f /bin/true $ROOTDIR/usr/bin/chfn

DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
 LC_ALL=C LANGUAGE=C LANG=C $MYCHROOT $ROOTDIR /usr/bin/dpkg --configure -a || true


echo "Preparing root..."

# no root password
$MYCHROOT $ROOTDIR passwd -d root

# initialize /etc/fstab
echo proc /proc proc defaults 0 0 > $ROOTDIR/etc/fstab

# hostname
echo $HOSTNAME > $ROOTDIR/etc/hostname

# write /etc/hosts
cat <<EOF > $ROOTDIR/etc/hosts
127.0.0.1       localhost
127.0.1.1       $HOSTNAME

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
ff02::3 ip6-allhosts
EOF

echo "Configuring wired network..."

# reset default udev persistent-net rule
rm -f $ROOTDIR/etc/udev/rules.d/*_persistent-net.rules

# /etc/resolv.conf symlink
rm -f $ROOTDIR/etc/resolv.conf
$MYCHROOT $ROOTDIR ln -s "/run/systemd/resolve/resolv.conf" "/etc/resolv.conf"

$MYCHROOT $ROOTDIR /bin/systemctl reenable systemd-networkd
$MYCHROOT $ROOTDIR /bin/systemctl reenable systemd-resolved
$MYCHROOT $ROOTDIR /bin/systemctl reenable systemd-timesyncd
$MYCHROOT $ROOTDIR /bin/systemctl reenable systemd-networkd-wait-online.service

# time used by timesyncd if no other is available
touch $ROOTDIR/var/lib/systemd/clock

cat <<EOF > $ROOTDIR/etc/systemd/network/en.network
[Match]
Name=en*
[Network]
DHCP=yes
EOF


echo "Configuring wireless network..."

cat <<EOF > $ROOTDIR/etc/systemd/network/wlan0.network
[Match]
Name=wlan0
[Network]
DHCP=yes
EOF

cat <<EOF > $ROOTDIR/etc/systemd/system/wpa_supplicant@.service
[Unit]
Description=WPA supplicant daemon (interface-specific version)
Requires=sys-subsystem-net-devices-%i.device
After=sys-subsystem-net-devices-%i.device
Before=network.target
Wants=network.target

[Service]
Type=simple
ExecStart=/sbin/wpa_supplicant -c/etc/wpa_supplicant/wpa_supplicant.conf -Dnl80211,wext -i%I

[Install]
WantedBy=sys-subsystem-net-devices-%i.device
EOF

$MYCHROOT $ROOTDIR /bin/systemctl reenable wpa_supplicant@wlan0.service

echo "Installing modules..."

tar -xf ../kernel/kernel-root.tar.gz -C $ROOTDIR
tar -xf ../kernel/kernel7-root.tar.gz -C $ROOTDIR

echo "Installing opt packages..."

for PACKAGE in $PACKAGES
 do echo installing $PACKAGE ...
    make -C ../packages/$PACKAGE DESTDIR="$ROOTDIR" MYCHROOT="$MYCHROOT" install
done

$ROOTDIR/sbin/ldconfig -r $ROOTDIR

echo "Cleaning up..."

./cleanup $ROOTDIR excludes.conf > /dev/null
mkdir -p $ROOTDIR/etc/dpkg/dpkg.cfg.d
cp excludes.conf $ROOTDIR/etc/dpkg/dpkg.cfg.d/

$MYCHROOT $ROOTDIR udevadm hwdb --update --usr

echo "Misc housekeeping..."

#ln -sf /sbin/init $ROOTDIR/init
cp init $ROOTDIR/init
chmod a+x $ROOTDIR/init
ln -sf /proc/mounts $ROOTDIR/etc/mtab

echo "Creating minimal device nodes..."

# this must be done last. if the fakeroot devices exist on the system,
# fakechroot wont be able to read from them, which breaks systemd setup.
cd $ROOTDIR/dev
fakeroot /sbin/MAKEDEV std
cd ../..




