import os

Import('env')
renv = env.Clone()
renv.AppendENVPath('PATH', '/usr/local/sbin')
renv.AppendENVPath('PATH', '/opt/sbin')
renv.AppendENVPath('PATH', '/sbin')
renv.AppendENVPath('PATH', '/usr/sbin')

try:
    renv['ENV']['http_proxy'] = os.environ['APT_HTTP_PROXY']
except KeyError:
    print("Don't forget to set up apt-cacher-ng")

packages = SConscript('../packages/SConscript', 'env')

all_root_debs = sorted(set.union(*(set(v['root_debs']) for v in packages.values()), set()))

multistrap_packages = renv['FUNCTIONS'].textwrap(all_root_debs, prefix='packages=')
multistrap_conf_file = renv.Substfile('multistrap.conf', 'multistrap.conf.in', SUBST_DICT={'@PACKAGES@': multistrap_packages})

def package_actions():
    for k, v in packages.items():
        yield 'tar -xf ${PACKAGES["' + str(k) + '"]["target"]} -C ${STAGE}'
        yield from v['install']


overlay = Dir('overlay/')
stage = Dir('stage/')

renv['ENV']['QEMU_LD_PREFIX'] = stage.abspath
renv['CHROOT'] = 'proot -0 -q qemu-arm -w / -r'

root_build = renv.Command('initrd', [multistrap_conf_file, '../kernel/kernel-root.tar.gz', '../kernel/kernel7-root.tar.gz', overlay, 'cleanup', 'excludes.conf', *[p['target'] for p in packages.values()]], [

    'rm -rf --one-file-system ${STAGE}',

    # run multistrap
    'mkdir -p ${STAGE}/etc/apt/trusted.gpg.d/',
    'gpg --export 82B129927FA3303E > ${STAGE}/etc/apt/trusted.gpg.d/raspberrypi-archive-keyring.gpg',
    'gpg --export 9165938D90FDDD2E > ${STAGE}/etc/apt/trusted.gpg.d/raspbian-archive-keyring.gpg',
    '/usr/sbin/multistrap -d ${STAGE} -f ${SOURCES[0]} ${REDIRECT}',

    # run preinst scripts
    'for script in ${STAGE}/var/lib/dpkg/info/*.preinst; do \
        [ "$$script" = "${STAGE}/var/lib/dpkg/info/vpnc.preinst" ] && continue; \
        echo "I: run preinst script $${script##${STAGE}}" ${REDIRECT}; \
        DPKG_MAINTSCRIPT_NAME=preinst \
        DPKG_MAINTSCRIPT_PACKAGE="`basename $$script .preinst`" \
        ${CHROOT} ${STAGE} $${script##${STAGE}} install; \
        done',

    # don't run makedev
    # we will create device nodes later, after we are done with the system dev
    'rm -f ${STAGE}/var/lib/dpkg/info/makedev.postinst',

    # work around https://pad.lv/1727874
    'rm -f ${STAGE}/var/lib/dpkg/info/raspbian-archive-keyring.postinst',
    'ln -sf /usr/share/keyrings/raspbian-archive-keyring.gpg ${STAGE}/etc/apt/trusted.gpg.d/',

    # work around PAM error
    'ln -s -f /bin/true ${STAGE}/usr/bin/chfn',

    # configure packages
    'DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true \
        LC_ALL=C LANGUAGE=C LANG=C ${CHROOT} ${STAGE} /usr/bin/dpkg --configure -a ${REDIRECT} || true',

    # initialize /etc/fstab
    'echo proc /proc proc defaults 0 0 > ${STAGE}/etc/fstab',

    # hostname
    'echo rpi-ramdisk > ${STAGE}/etc/hostname',

    # delete root password
    '${CHROOT} ${STAGE} passwd -d root',

    # remove excluded files that multistrap missed
    '${SOURCES[4]} ${STAGE} ${SOURCES[5]} ${REDIRECT}',
    'mkdir -p ${STAGE}/etc/dpkg/dpkg.conf.d/',
    'cp ${SOURCES[5]} ${STAGE}/etc/dpkg/dpkg.conf.d/',

    # update hwdb after cleaning
    '${CHROOT} ${STAGE} udevadm hwdb --update --usr',

    # modules
    'tar -xf ${SOURCES[1]} -C ${STAGE}',
    'tar -xf ${SOURCES[2]} -C ${STAGE}',

    # packages
    *list(package_actions()),

    # overlay
    'cp -r ${SOURCES[3]}/* ${STAGE}',

    # ldconfig
    '${STAGE}/sbin/ldconfig -r ${STAGE}',

    # network setup

    # reset default udev persistent-net rule
    'rm -f ${STAGE}/etc/udev/rules.d/*_persistent-net.rules',

    # /etc/resolv.conf symlink
    'ln -sf /run/systemd/resolve/resolv.conf ${STAGE}/etc/resolv.conf',

    # enable network services
    '${CHROOT} ${STAGE} /bin/systemctl reenable systemd-networkd',
    '${CHROOT} ${STAGE} /bin/systemctl reenable systemd-resolved',
    '${CHROOT} ${STAGE} /bin/systemctl reenable systemd-timesyncd',
    '${CHROOT} ${STAGE} /bin/systemctl reenable systemd-networkd-wait-online.service',
    '${CHROOT} ${STAGE} /bin/systemctl reenable wpa_supplicant@wlan0.service',

    # time used by timesyncd if no other is available
    'touch ${STAGE}/var/lib/systemd/clock',

    # mtab
    'ln -sf /proc/mounts ${STAGE}/etc/mtab',

    # this must be done last. if the fakeroot devices exist on the system,
    # chroot wont be able to read from them, which breaks systemd setup.
    'cd ${STAGE}/dev && fakeroot /sbin/MAKEDEV std',

    # pack rootfs into initrd
    '${CHROOT} ${STAGE} sh -c "cd / && find * -xdev -not \( \
              -path host-rootfs -prune \
              -path run -prune \
              -path proc -prune \
              -path sys -prune \
              -path boot -prune \
           \) | cpio --create -H newc" | xz -C crc32 -9 > ${TARGET}'

], STAGE=stage, PACKAGES=packages)

renv.Clean(root_build, stage)
