import os
import posixpath
import pathlib
import textwrap

env = Environment(tools=[])
env.Tool('textfile')

try:
    env['ENV']['http_proxy'] = os.environ['APT_HTTP_PROXY']
except KeyError:
    print("Don't forget to set up apt-cacher-ng")


def relative_links(target, source, env):

    root = pathlib.Path(str(target[0].abspath))

    for path in pathlib.Path(root).rglob('*'):
        if path.is_symlink():
            link_target = os.readlink(str(path))
            if link_target[0] != '/':
                continue
            if link_target.startswith(str(root)):
                continue
            path.unlink()
            new_target = posixpath.relpath(root / link_target[1:], start=path.parent)
            print(path, ':', link_target, '->', new_target)
            os.symlink(new_target, str(path))


# sysroot setup
Import('packages')

wrapper = textwrap.TextWrapper(
    break_long_words=False, break_on_hyphens=False,
    initial_indent='packages=', subsequent_indent='packages=',
    width=120,
)

all_sysroot_debs = sorted(set.union(*(set(v['sysroot_debs']) for v in packages.values())))

multistrap_conf = Value(wrapper.fill(' '.join(all_sysroot_debs)))
multistrap_conf_file = env.Substfile('multistrap.conf', ['multistrap.conf.in', multistrap_conf, Value('')])
sysroot_dir = Dir('sysroot/')
sysroot_overlay = Dir('overlay/')

sysroot = env.Command(sysroot_dir, [multistrap_conf_file, sysroot_overlay], [
    'mkdir -p ${TARGET}/etc/apt/trusted.gpg.d/',
    'gpg --export 82B129927FA3303E > ${TARGET}/etc/apt/trusted.gpg.d/raspberrypi-archive-keyring.gpg',
    'gpg --export 9165938D90FDDD2E > ${TARGET}/etc/apt/trusted.gpg.d/raspbian-archive-keyring.gpg',
    '/usr/sbin/multistrap -d ${TARGET} -f ${SOURCES[0]}',

    # work around for the following bugs:
    #  https://github.com/raspberrypi/firmware/issues/1013
    #  https://bugreports.qt.io/browse/QTBUG-62216
    #  https://bugreports.qt.io/browse/QTBUG-69176
    # The workaround is simply to copy manually fixed pkgconfig files
    # somewhere where the build will find them.
    'cp -r ${SOURCES[1]}/* ${TARGET}',

    # work around for libtool badness. is this still needed?
    # mkdir -p sysroot/opt
    # cd sysroot/opt && for dir in $(PACKAGES); do ln -s ../../$$dir/root/opt/$$dir $$dir; done

])
env.AddPostAction(sysroot, relative_links)


# toolchain setup

toolchain_dir = Dir('toolchain/')
toolchain_tarball = File('gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf.tar.xz')
toolchain_url = Value('https://releases.linaro.org/components/toolchain/binaries/6.3-2017.05/arm-linux-gnueabihf/gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf.tar.xz')

env.Command(toolchain_tarball, toolchain_url, 'wget -N -O ${TARGET} ${SOURCE}')
env.Command(toolchain_dir, toolchain_tarball, [
    'mkdir -p ${TARGET}',
    'tar -C ${TARGET} --strip-components=1 -xf ${SOURCE}',
])
