import os
import posixpath
import pathlib

Import('env packages')
senv = env.Clone()

try:
    senv['ENV']['http_proxy'] = os.environ['APT_HTTP_PROXY']
except KeyError:
    print("Don't forget to set up apt-cacher-ng")


def relative_links(target, source, env):

    root = pathlib.Path(str(target[0].abspath))

    for path in pathlib.Path(root).rglob('*'):
        if path.is_symlink():
            link_target = os.readlink(str(path))
            if link_target[0] != '/':
                continue
            if link_target.startswith(str(root)):
                continue
            path.unlink()
            new_target = posixpath.relpath(root / link_target[1:], start=path.parent)
            #print(path, ':', link_target, '->', new_target)
            os.symlink(new_target, str(path))


all_sysroot_debs = sorted(set.union(*(set(v['sysroot_debs']) for v in packages.values()), set()))
multistrap_packages = senv['FUNCTIONS'].textwrap(all_sysroot_debs, prefix='packages=')
multistrap_conf_file = senv.Substfile('multistrap.conf', 'multistrap.conf.in', SUBST_DICT={'@PACKAGES@': multistrap_packages})

sysroot_build = senv.Command('sysroot/', [multistrap_conf_file, 'overlay/'], [

    'rm -rf --one-file-system ${TARGET}',

    'mkdir -p ${TARGET}/etc/apt/trusted.gpg.d/',
    'gpg --export 82B129927FA3303E > ${TARGET}/etc/apt/trusted.gpg.d/raspberrypi-archive-keyring.gpg',
    'gpg --export 9165938D90FDDD2E > ${TARGET}/etc/apt/trusted.gpg.d/raspbian-archive-keyring.gpg',
    '/usr/sbin/multistrap -d ${TARGET} -f ${SOURCES[0]} ${REDIRECT}',

    # work around for the following bugs:
    #  https://github.com/raspberrypi/firmware/issues/1013
    #  https://bugreports.qt.io/browse/QTBUG-62216
    #  https://bugreports.qt.io/browse/QTBUG-69176
    # The workaround is simply to copy manually fixed pkgconfig files
    # somewhere where the build will find them.
    'cp -r ${SOURCES[1]}/* ${TARGET}',

    # work around for libtool badness. is this still needed?
    # mkdir -p sysroot/opt
    # cd sysroot/opt && for dir in $(PACKAGES); do ln -s ../../$$dir/root/opt/$$dir $$dir; done

])
senv.AddPostAction(sysroot_build, relative_links)
senv.Clean(sysroot_build, 'sysroot/')

toolchain_tarball = 'gcc-linaro-6.3.1-2017.05-x86_64_arm-linux-gnueabihf.tar.xz'
toolchain_url = Value('https://releases.linaro.org/components/toolchain/binaries/6.3-2017.05/arm-linux-gnueabihf/' + toolchain_tarball)

senv.NoClean(senv.Command(toolchain_tarball, toolchain_url, 'cd ${TARGET.Dir(".")} && wget -N ${SOURCE}'))
senv.NoClean(senv.Command('toolchain/', toolchain_tarball, [
    'mkdir -p ${TARGET}',
    'tar -C ${TARGET} --strip-components=1 -xf ${SOURCE}',
]))
